asyncapi: 2.2.0
info:
  title: Syntropy Websockets API
  version: 1.0.0
  description: >
    Syntropy SGN WebSockets API allows to connect with Syntropy controller and
    get SDN node configuration updates and return required info to controller.


    ### General Rules


    - Agent version must be valid semver https://semver.org/.

    - All messages sent and received via WebSockets are encoded in JSON format


    ### HTTP request headers when connecting to controller websocket.
      ```
      {
        "X-Ipv4-Nat11": "Server main interface ip.",
        "X-DeviceName": "User friendly human readable device name.",
        "X-DeviceIp": "Host machine public ip",
        "x-AgentVersion": "Agent software version. Semantic Versioning (x.x.x)",
        "x-KernelVersion": "Host kernel version. Semantic Versioning (x.x.x)",
      }

      ```
    #### On Connect to retrieve latest configuration info agent should fetch it
    from
    https://controller-sandbox-server.syntropystack.com/api/agents/auth_key/config?ip=AGENT_PUBLIC_IP
servers:
  prod:
    url: controller-prod-agents.syntropystack.com?auth_key=auth_key
    protocol: wss
    description: |
      Always stable production server for agents.
  devel:
    url: controller-devel-agents.syntropystack.com?auth_key=auth_key
    protocol: wss
    description: |
      Always stable Development server for agents.
  sandbox:
    url: controller-sandbox-agents.syntropystack.com?auth_key=auth_key
    protocol: wss
    description: |
      Sometimes Stable Sandbox server for agents.
channels:
  /:
    subscribe:
      description: Receive messages from the controller
      message:
        oneOf:
          - $ref: '#/components/messages/SET_CONFIG (CTA)'
          - $ref: '#/components/messages/UPDATE_CONFIG (CTA)'
    publish:
      description: Send messeges to the controller
      message:
        oneOf:
          - $ref: '#/components/messages/LOGGER'
components:
  messages:
    LOGGER:
      description: >-
        SDN agent sends nicely formatted log data to controller. This data is
        later redirected to sdn agents index for users to consume.
      payload:
        $ref: '#/components/schemas/LOGGER'


    GET_SUPPORT_INFO (CTA):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (CTA)'
      x-response:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'
      examples:
        - payload:
            id: nEsBfD773UlafZ12
            type: SUPPORT_INFO
            data: {}
    SUPPORT_INFO (ATC):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'
    SET_CONFIG (CTA):
      description: >-
        Event is triggered when platform agent establishes connection with
        controller. Controller sends entire configuration dump to platform
        agent.
      payload:
        $ref: '#/components/schemas/SET_CONFIG'

    UPDATE_CONFIG (CTA):
      description: >-
        Event is triggered when platform agent updates connection with
        controller. Controller sends only diff configuration dump to platform
        agent.
      payload:
        $ref: '#/components/schemas/SET_CONFIG'
  schemas:
    SET_CONFIG:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_CONFIG
        data:
          type: object
          required:
            - agent_id
            - network
          properties:
            agent_id:
              type: string
            unat4:
              type: array
              description: Configure NFTABLES / EBPF
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/unat4_table_add'
                  - $ref: '#/components/schemas/unat4_table_add'
                  - $ref: '#/components/schemas/unat4_table_del'
                  - $ref: '#/components/schemas/unat4_mapping_clear'
                  - $ref: '#/components/schemas/unat4_mapping_get'
    CONFIG_INFO (ATC):
      type: object
      description: TBD
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: CONFIG_INFO
        data:
          type: object
          description: TBD
          properties:
            unat4:
              type: array
              description: Configure NFTABLES / EBPF
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/unat4_table_add'
                  - $ref: '#/components/schemas/unat4_table_add'
                  - $ref: '#/components/schemas/unat4_table_del'
                  - $ref: '#/components/schemas/unat4_mapping_clear'
                  - $ref: '#/components/schemas/unat4_mapping_get'
            settings:
              type: object
              properties:
                auto_ping:
                  $ref: '#/components/schemas/set_auto_ping'
    AUTO_PING_RES:
      type: object
      properties:
        type:
          type: string
          const: AUTO_PING
        data:
          type: array
          description: Array of ips.
          items:
            description: Array of ip addresses should ping.
            type: object
            properties:
              ip:
                type: string
                description: Ip address in string format.
              latency_ms:
                type: integer
              packet_loss:
                type: number
    LOGGER:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        type:
          type: string
          const: LOGGER
        data:
          type: object
          required:
            - severity
            - message
          properties:
            severity:
              type: string
            message:
              type: string
    SUPPORT_INFO (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: GET_SUPPORT_INFO
        data:
          type: object
    SUPPORT_INFO (ATC):
      type: object
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: SUPPORT_INFO
        data:
          type: array
          items:
            $ref: '#/components/schemas/support_info'
    set_auto_ping:
      type: object
      required:
        - ips
        - interval
      properties:
        hosts:
          type: array
          description: Array of ips.
          items:
            type: string
            description: Array of ip addresses agent should ping.
        interval:
          $ref: '#/components/schemas/interval'
          description: Interval in seconds to ping hosts.
    unat4_table_add:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: unat4_table_add
        args:
          type: object
          required:
            - addr
          properties:
            addr:
              $ref: '#/components/schemas/ip_addr'
      description: Unat4 table creation.
    unat4_table_del:
      type: object
      proprties:
        fn:
          type: string
          const: unat4_table_del
        args:
          type: object
    unat4_mapping_clear:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: unat4_mapping_clear
        args:
          type: object
          required:
            - addr
            - port
          properties:
            addr:
              $ref: '#/components/schemas/ip_addr'
            port:
              $ref: '#/components/schemas/port'
      description: Delete mapping
    unat4_mapping_get:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: unat4_mapping_get
        args:
          type: object
          required:
            - addr
            - port
          properties:
            addr:
              $ref: '#/components/schemas/ip_addr'
            port:
              $ref: '#/components/schemas/port'
      description: Get mapping info
    unat4_mapping_set:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: unat4_table_set
        args:
          type: object
          required:
            - addr
            - port
          properties:
            addr:
              $ref: '#/components/schemas/ip_addr'
            port:
              $ref: '#/components/schemas/port'
            endpoints:
              $ref: '#/components/schemas/endpoints'
      description: Unat4 mapping set.
    endpoints:
      type: object
      required:
        - addr
        - port
      properties:
        addr:
          $ref: '#/components/schemas/ip_addr'
        port:
          $ref: '#/components/schemas/port'
    support_info:
      description: Status after creating interface
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string
    msg_id:
      type: string
      description: Unique ID of message. (response should be sent with same id as request)
    ip_addr:
      type: string
    port:
      type: number
    executed_at:
      type: string
      format: date-time
    interval:
      type: integer
    action:
      type: string
      enum:
        - SET
        - DEL