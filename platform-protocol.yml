asyncapi: 2.0.0

info:
  title: Syntropy Websockets API
  version: '1.0.0'
  description: |
    Syntropy WebSockets API allows to connect with Syntropy controller and get node configuration updates and return required info to controller.

    ### General Rules

    - Agent version must be valid semver https://semver.org/.
    - All messages sent and received via WebSockets are encoded in JSON format

    ### HTTP request headers when connecting to controller websocket.
      ```
      {
        "Authorization": "AGENT_TOKEN",
        "X-DeviceId": "Unique device ID.",
      }
      ```
    ### Github
    - https://github.com/SyntropyNet/protocols/tree/v2-proposal
servers:
  prod:
    url: controller-prod-platform-agents.syntropystack.com
    protocol: wss
    description: |
      Always stable production server for agents . Authentication token has to be created at https://platform.syntropystack.com
  devel:
    url: controller-devel-platform-agents.syntropystack.com
    protocol: wss
    description: |
      Always stable Development server for agents. Authentication token has to be created at https://platform-devel.syntropystack.com
  sandbox:
    url: controller-sandbox-platform-agents.syntropystack.com
    protocol: wss
    description: |
      Sometimes Stable Sandbox server for agents. Authentication token has to be created at https://platform-sandbox.syntropystack.com

channels:
  /:
    subscribe:
      description: Receive messages from the controller
      message:
        oneOf:
          - $ref: '#/components/messages/GET_INIT_INFO (CTA)'
          - $ref: '#/components/messages/SET_CONFIG (CTA)'
          - $ref: '#/components/messages/SET_AUTO_PING (CTA)'
          - $ref: '#/components/messages/SET_PEER_CONF (CTA)'
          - $ref: '#/components/messages/GET_SUPPORT_INFO (CTA)'

    publish:
      description: Send messeges to the controller
      message:
        oneOf:
          - $ref: '#/components/messages/INIT_INFO (ATC)'
          - $ref: '#/components/messages/CONFIG_INFO (ATC)'
          - $ref: '#/components/messages/AUTO_PING (ATC)'
          - $ref: '#/components/messages/NETWORK_STATISTICS (ATC)'
          - $ref: '#/components/messages/SERVICE_ROUTE_CHANGE (ATC)'
          - $ref: '#/components/messages/SERVICE_STATUS (ATC)'
          - $ref: '#/components/messages/LOGGER (ATC)'
          - $ref: '#/components/messages/SERVICE_INFO (ATC)'
          - $ref: '#/components/messages/SUPPORT_INFO (ATC)'


components:
  messages:
    SET_AUTO_PING (CTA):
      description: Controller sets list of hosts for platform agent to ping and repeat interval in seconds. Platform agent respons periodically with pinging information.
      payload:
        $ref: '#/components/schemas/SET_AUTO_PING (CTA)'
      examples:
        - payload:
            id: nEsBfD773UlafZnf
            type: AUTO_PING
            data:
              ips:
                - 23.95.220.138
                - 94.237.29.266
                - 173.104.147.220
              interval: 60
              response_limit: 5
        - payload:
            id: nEsBfD773UlafZ12
            type: AUTO_PING
            data:
              hosts:
                -
              interval: 60
              response_limit: 5

    AUTO_PING (ATC):
      description: Controller sets list of hosts for platform agent to ping and repeat interval in seconds. Platform agent respons periodically with pinging information.
      payload:
        $ref: '#/components/schemas/AUTO_PING (ATC)'

    GET_INIT_INFO (CTA):
      summary: Event for getting essential info about endpoint.
      description: Event is triggered when platform agent establishes connection with controller. Controller requests platform agent for agent's metadata such as its server provider, category, location, user specified tags, available services (entire list) in agent network. Controller accepts docker_* prefixed keys for compatibility.
      payload:
        $ref: '#/components/schemas/GET_INIT_INFO (CTA)'
      x-response:
        $ref: '#/components/schemas/INIT_INFO (ATC)'
      examples:
        - payload:
            id: nEsBfD773UlafZ12
            type: GET_INIT_INFO
            data: {}

    INIT_INFO (ATC):
      summary: Event for getting essential info about endpoint.
      description: Event is triggered when platform agent establishes connection with controller. Controller requests platform agent for agent's metadata such as its server provider, category, location, user specified tags, available services (entire list) in agent network. Controller accepts docker_* prefixed keys for compatibility.
      payload:
        $ref: '#/components/schemas/INIT_INFO (ATC)'
      examples:
        - payload:
            id: 4QpCCN4NDhwAGi1X
            executed_at: '2021-09-14T23:21:50.631912'
            type: INIT_INFO
            data:
              external_ip: 80.208.227.130
              network_info:
                - agent_network_id: b1fa1f0bdc38eb1862e1fcdcdcf2f26883c2f63473fe57f87ebe08ad48366200
                  agent_network_name: bridge
                  agent_network_subnets:
                    - 172.17.0.0/16
              agent_name: 2yfq.l.time4vps.cloud
              agent_provider:
              agent_category:
              service_status: false
              agent_tags: [ ]
              network_ids: [ ]
              container_info: [ ]
              location_lat:
              location_lon:

    GET_SUPPORT_INFO (CTA):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'
      x-response:
        $ref: '#/components/schemas/SUPPORT_INFO (CTA)'
      examples:
        - payload:
            id: nEsBfD773UlafZ12
            type: SUPPORT_INFO
            data: {}

    SUPPORT_INFO (ATC):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (CTA)'
      x-response:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'


    SET_CONFIG (CTA):
      description: Event is triggered when platform agent establishes connection with controller. Controller sends entire configuration dump to platform agent.
      payload:
        $ref: '#/components/schemas/SET_CONFIG'
      x-response:
        $ref: '#/components/messages/CONFIG_INFO (ATC)'
      examples:
        - payload:
            id: Asa05ML1102HSJVl
            type: SET_CONFIG
            data:
              agent_id: 1664
              interfaces:
                -
                  name: PUBLIC
                  private_ip: 10.69.0.146
                  public_key: RzaBT6fXJime+KEFJKkWrozumOEDPpZhJaHWPZmerAA=
                  port: 35524
                  peers:
                    -
                      public_key: c1/1GkBsq+MCDdiXFrfjLnXI+H7oGvDQs0kfn/gmFkI=
                      private_ip: 10.69.100.23
                      public_ip: 94.251.23.158
                      port: 0
                      connection_id: 1025617
                      connection_group_id: 75582
                      agent_id: 6172
                      services:
                        -
                          ip: 172.20.0.0/26
                          name: service_Name
                          ports:
                            tcp:
                              - 1234
                              - 43344
                            udp:
                              - 23543
                      action:
                        enum:
                          - ADD
                          - DEL

    CONFIG_INFO (ATC):
      summary: CONFIG_INFO (ATC) is a response to SET_CONFIG (CTA) message
      description: Platform agents sends this event to controller when it wants to update configuration data, i.e. to change configured interface public key due to unrecoverable loss of data on platform agents side.
      payload:
        $ref: '#/components/schemas/CONFIG_INFO (ATC)'
      examples:
        - payload:
            id: 0OEqrxBRyAExh04b
            executed_at: "2021-08-04T11:18:38.319935"
            type: CONFIG_INFO (ATC)
            data:
              -
                fn: create_interface
                data:
                  public_key: O39YgbELLp80K2G5D/xZjcM0gZcRURW1LCWNc5FaO3I=
                  listen_port: 49152
                  index: 0
                  internal_ip: 10.69.14.97
                  status: 0
              -
                fn: create_interface
                data:
                  public_key: J7Dt8IZ3arBUSkHWTJW5WUPf3cpoZRU+qSYVS+eqwAI=
                  listen_port: 49156
                  index: 1
                  internal_ip: 10.69.14.98
              -
                fn: create_interface
                data:
                  public_key: 0GiDp4uyu548ExsxCxV8MMDSToh49jYy8Xm9igM15n0=
                  listen_port: 49153
                  index: 2
                  internal_ip: 10.69.14.99
              -
                fn: create_interface
                data:
                  public_key: 2sw+YfjZUVQEPECtfqKtvaNvJBpC+ysQRHD/zw4Dcg0=
                  listen_port: 49154
                  index: 3
                  internal_ip: 10.69.14.100
    SET_PEER_CONF (CTA):
      description: Controller sends platform agent configuration commands, which should be executed in platform agent, i.e. to create interface, to add peer, to delete interface, to delete peer. When adding interface, controller can pick port, or agent can respond with assigned one.
      payload:
        $ref: '#/components/schemas/SET_PEER_CONF (CTA)'
      examples:
        - payload:
            id: Asa05ML1102HSJVl
            type: SET_PEER_CONF
            data:
              -
                fn: add_peer
                args:
                  allowed_ips:
                    - 10.69.10.93/32
                  endpoint_ipv4: 94.251.23.158
                  endpoint_port: 0
                  index: SYNTROPY_PUBLIC
                  public_key: c1/1GkBsq+MCDdiXFrfjLnXI+H7oGvDQs0kfn/gmFkI=
                  gw_ipv4: 10.69.0.47
                metadata:
                  device_id: 292:00329-10280-00000-AA017
                  device_name: Example
                  device_public_ipv4: 94.251.23.158
                  connection_id: 1025617
                  connection_group_id: 75582
                  agent_id: 6172
                  link_tag: PUBLIC
                  allowed_ips_info:
                    agent_service_name: service_Name
                    agent_service_tcp_ports:
                      - 45444
                    agent_service_udp_ports:
                    agent_service_subnet_ip: 172.20.0.0/26
        - payload:
            id: Asa05ML1102HSJVl
            type: SET_PEER_CONF (CTA)
            data:
              -
                fn: remove_peer
                args:
                  index: SYNTROPY_PUBLIC
                  public_key: KaCq7nTViC9rhPc21ky92H7iTldGF76m3hrcSR4UdUc=
                  allowed_ips:
                    - 10.69.10.86/32
              -
                fn: remove_peer
                index: SYNTROPY_SDN1
                public_key: AxB/JKQ9aPRgfEA5zI00jX4aZzfxz8LwTKrYaN0OkjI=
                allowed_ips:
                 - 10.69.10.86/32

    NETWORK_STATISTICS (ATC):
      description: Platform agent periodically sends wireguard configured interfaces peers bandwith data (bandwith of one particular peer via particular interface). Platform agent sends data every 10 seconds. If there is nothing to report, platform agent does not send anything.
      payload:
        $ref: '#/components/schemas/NETWORK_STATISTICS (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: "2021-09-08T12:22:01.248033"
            type: NETWORK_STATISTICS (ATC)
            data:
              - index: SYNTROPY_PUBLIC
                peers:
                  - connection_id: 2344
                    connection_group_id: 344
                    last_handshake: '2021-09-08T03:35:52'
                    rx_bytes: 308
                    tx_bytes: 888380
                    latency_ms:
                    packet_loss: 1
                    rx_bps: 354
                    tx_bps: 553
              - index: SYNTROPY_SDN1
                peers:
                  - connection_id: 3244
                    connection_group_id: 345
                    rx_bytes: 372556
                    tx_bytes: 417812
                    latency_ms: 188.1084442138672
                    packet_loss: 0
                    rx_bps: 3453
                    tx_bps: 4545
                    

    SERVICE_ROUTE_CHANGE (ATC):
      description: Platform agent sends information when current ACTIVE route changes.
      payload:
        $ref: '#/components/schemas/SERVICE_ROUTE_CHANGE (ATC)'

    LOGGER (ATC):
      description: Platform agent sends nicely formatted log data to controller. This data is later redirected to platform agents index for users to consume.
      payload:
        $ref: '#/components/schemas/LOGGER (ATC)'

    SERVICE_INFO (ATC):
      description: This event is triggered when platform agent network changes. Platform agent sends entire list of available services and their metadata.
      payload:
        $ref: '#/components/schemas/SERVICE_INFO (ATC)'

    ERRORS (ATC):
      description: Platform agent sends information about route addition. Confirms successes and failures.
      payload:
        $ref: '#/components/schemas/ERRORS (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: "2021-09-08T12:22:01.248033"
            type: ERRORS (ATC)
            data:
              - key: ROUTES
                value:
                  - connection_group_id: '1001'
                    ip: 167.0.15.1
                    errors:
                      - CONFLICT
                  - connection_group_id: '1001'
                    ip: 167.0.15.2
                    errors: [ ]
              - key: INTERFACES
                value:
                  - ip: 172.69.0.10
                    errors:
                      - WG_NOT_FOUND
              - key: SYSINFO
                value:
                  - DISK_PRESSURE

    SERVICE_STATUS (ATC):
      description: Platform agent sends information about route addition. Confirms successes and failures.
      payload:
        $ref: '#/components/schemas/service_status'

  schemas:
    SET_AUTO_PING (CTA):
      type: object
      properties:
        type:
          type: string
          const: SET_AUTO_PING
        data:
          properties:
            ips:
              type: array
              description: Array of ips.
              items:
                type: string
                description: Array of ip addresses agent should ping.
            interval:
              $ref: '#/components/schemas/interval'
            response_limit:
              $ref: '#/components/schemas/response_limit'


      required:
          - type
          - data


    AUTO_PING (ATC):
      type: object
      properties:
        type:
          type: string
          const: AUTO_PING
        executed_at:
          type: string
        data:
          type: array
          description: Array of ips.
          items:
            description: Array of ip addresses should ping.
            type: object
            properties:
              ip:
                type: string
                description: Ip address in string format.
              latency_ms:
                type: integer
              packet_loss:
                type: number


    GET_INIT_INFO (CTA):
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          const: GET_INIT_INFO
        data:
          type: object


    INIT_INFO (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          type: string
        executed_at:
          type: string
        type:
          type: string
          const: INIT_INFO
        data:
          type: object
          properties:
            agent:
              type: object
              required:
                - name
                - public_ip
                - operating_system
                - version
              properties:
                  name:
                    type: string
                  provider:
                    type: string
                  tags:
                    type: array
                    description: Array of tags.
                    items:
                      type: string
                      description: Tag in string format.
                  public_ip:
                    type: string
                    description: Agent host public ip.
                  version:
                    type: string
                    description: "Agent software version. Semantic Versioning (x.x.x)."
                  operating_system:
                    type: string
                    enum:
                      - LINUX
                      - DARWIN
                      - WINDOWS
            config:
              type: object
              properties:
                auto_connect_services:
                  type: boolean
                  default: False
                  description: "Status whether services will be connected by default or not."

    SUPPORT_INFO (CTA):
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
          const: GET_SUPPORT_INFO
        data:
          type: object


    SUPPORT_INFO (ATC):
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
        executed_at:
          type: string
        type:
          type: string
          const: SUPPORT_INFO
        data:
          type: array
          items:
            $ref: '#/components/schemas/support_info'


    SET_CONFIG:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_CONFIG
        data:
          type: object
          required:
            - agent_id
            - network
          properties:
             agent_id:
               type: string
             interfaces:
               type: array
               items:
                - $ref: '#/components/schemas/interface'


    CONFIG_INFO (ATC):
      type: object
      description: Need to send only if interfaces updated compared to SET_CONFIG (CTA).
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          type: string
        type:
          type: string
          const: CONFIG_INFO
        data:
          type: object
          description: List of resulting executed VPN commands. (create_interface only atm). Need to change only if public_key/port differs from SET_CONFIG (CTA).
          properties:
            interfaces:
              type: array
              items:
                - $ref: '#/components/schemas/interface'


    SET_PEER_CONF (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_PEER_CONF
        data:
          type: array
          description: List of wireguard configration commands
          items:
            - $ref: '#/components/schemas/peer'

    NETWORK_STATISTICS (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        executed_at:
          type: string
        type:
          type: string
          const: NETWORK_STATISTICS (ATC)
        data:
          type: array
          description: List of interfaces with analytic peers data.
          items:
            type: object
            required:
              - index
            properties:
              index:
                type: string
              peers:
                type: array
                items:
                  type: object
                  required:
                    - connection_id
                    - connection_group_id
                  properties:
                    connection_id:
                      $ref: '#/components/schemas/connection_id'
                    connection_group_id:
                      $ref: '#/components/schemas/connection_group_id'
                    last_handshake:
                      type: string
                    latency_ms:
                      $ref: '#/components/schemas/latency_ms'
                    packet_loss:
                      $ref: '#/components/schemas/packet_loss'
                    rx_bytes:
                      $ref: '#/components/schemas/rx_bytes'
                    tx_bytes:
                      $ref: '#/components/schemas/tx_bytes'
                    tx_bps:
                      $ref: '#/components/schemas/tx_bps'
                    rx_bps:
                      $ref: '#/components/schemas/rx_bps'

    SERVICE_ROUTE_CHANGE (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        executed_at:
          type: string
        type:
          type: string
          const: SERVICE_ROUTE_CHANGE (ATC)
        data:
          type: array
          description: List of peers connections that became active after rerouting event.
          items:
            type: object
            required:
              - connection_id
            properties:
              prev_connection_id:
                $ref: '#/components/schemas/connection_id'
                default: 0
              connection_id:
                $ref: '#/components/schemas/connection_id'


    LOGGER (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        executed_at:
          type: string
        type:
          type: string
          const: LOGGER (ATC)
        data:
          type: object
          required:
            - severity
            - message
          properties:
            severity:
              $ref: '#/components/schemas/severity'
            message:
              type: string


    SERVICE_INFO (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        executed_at:
          type: string
        type:
          type: string
          const: SERVICE_INFO (ATC)
        data:
          type: array
          items:
            type: object
            required:
              - docker_network_id
              - docker_network_name
              - docker_network_subnets
            properties:
              name:
                type: string
              type:
                $ref: '#/components/schemas/service_type'
              ip:
                type: string
              network:
                type: array
                items:
                  type: string
              ports:
                $ref: '#/components/schemas/service_ports'


    ERRORS (ATC):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        executed_at:
          type: string
        type:
          type: string
          const: ERRORS (ATC)
        data:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/new_route_statuses'
              - $ref: '#/components/schemas/interface_statuses'
              - $ref: '#/components/schemas/sys_info_statuses'


    create_interface:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: create_interface
        args:
          $ref: '#/components/schemas/interface'
        metadata:
          $ref: '#/components/schemas/interface_metadata'
      description: Wireguard interface creation.

    remove_interface:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: remove_interface
        args:
          type: object
          required:
            - index
          properties:
            index:
              type: string
      description: Wireguard interface remove.

    add_peer:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: add_peer
        args:
          $ref: '#/components/schemas/peer'
      description: Wireguard add peer.

    remove_peer:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: remove_peer
        args:
          type: object
          required:
            - index
          properties:
            index:
              type: string
            public_key:
              $ref: '#/components/schemas/public_key'
            allowed_ips:
              $ref: '#/components/schemas/allowed_ips'
      description: Wireguard peer remove.


    interface:
      type: object
      required:
        - internal_ip
        - name
      properties:
        index:
          $ref: '#/components/schemas/index'
        internal_ip:
          $ref: '#/components/schemas/internal_ip'
        public_key:
          $ref: '#/components/schemas/public_key'
        port:
          $ref: '#/components/schemas/port'
        peers:
          type: array
          items:
            - $ref: '#/components/schemas/peer'
      description: Wireguard interface info.

    peer:
      type: object
      required:
        - index
        - public_key
        - allowed_ips
        - gw_ipv4
      properties:
        index:
          $ref: '#/components/schemas/index'
        public_key:
          $ref: '#/components/schemas/public_key'
        private_ip:
          type: string
        public_ip:
          type: string
        port:
          $ref: '#/components/schemas/port'
        connection_id:
          $ref: '#/components/schemas/connection_id'
        connection_group_id:
          $ref: '#/components/schemas/connection_group_id'
        agent_id:
          type: string
        services:
          type: array
          items:
            type: object
            properties:
              ip:
                $ref: '#/components/schemas/ip'
              name:
                type: string
              ports:
                $ref: '#/components/schemas/service_ports'
              agent_service_udp_ports:
                $ref: '#/components/schemas/udp_ports'
        action:
          $ref: '#/components/schemas/peer_action'
      description: Peer fields.

    interface_metadata:
      type: object
      properties:
        connection_id:
          $ref: '#/components/schemas/connection_id'
      description: Interface Metadata

    peer_metadata:
      type: object
      properties:
        device_id:
          type: string
        device_name:
          type: string
        device_public_ipv4:
          type: string
        connection_id:
          $ref: '#/components/schemas/connection_id'
        connection_group_id:
          $ref: '#/components/schemas/connection_group_id'
        allowed_ips_info:
          type: array
          items:
            type: object
            properties:
              agent_service_name:
                type: string
              agent_service_subnet_ip:
                type: string
              agent_service_tcp_ports:
                $ref: '#/components/schemas/tcp_ports'
              agent_service_udp_ports:
                $ref: '#/components/schemas/udp_ports'
      description: Peer Metadata

    container_info:
      type: array
      description: Array of docker network objects.
      items:
        description: Docker network object.
        type: object
        required:
          - agent_container_id
          - agent_container_name
          - agent_container_state
          - agent_container_networks
          - agent_container_ips
        properties:
          agent_container_id:
            type: string
            description: Unique id of docker container.
          agent_container_name:
            type: string
          agent_container_state:
            type: string
            description: Container state.
            enum:
              - running
              - stopped
          agent_container_uptime:
            type: string
            description: Container uptime.
          agent_container_networks:
            type: array
            description: Networks that container belongs to.
            items:
              type: string
          agent_container_ips:
            type: array
            description: Container ips.
            items:
              type: string
          agent_container_ports:
            $ref: '#/components/schemas/service_ports'

    service_status:
      type: object
      description: Status after adding route to host routing table.
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: "-"
        type:
          type: string
          const: SERVICE_STATUS
        data:
          type: array
          items:
            type: object
            required:
              - connection_group_id
              - statuses
            properties:
              connection_id:
                $ref: '#/components/schemas/connection_id'
              connection_group_id:
                $ref: '#/components/schemas/connection_group_id'
              statuses:
                $ref: '#/components/schemas/route_statuses'

    route_statuses:
      type: array
      description: List of ips.
      items:
        type: object
        required:
          - status
          - ip
        properties:
          status:
            $ref: '#/components/schemas/route_status'
          ip:
            type: string
          msg:
            type: string


    new_route_statuses:
      description: Status after adding route to host routing table.
      properties:
        key:
          type: string
          const: ROUTES
        value:
          type: array
          items:
            type: object
            required:
              - connection_group_id
              - statuses
            properties:
              connection_group_id:
                $ref: '#/components/schemas/connection_group_id'
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/route_status'
              ip:
                type: string


    interface_statuses:
      description: Status after creating interface
      properties:
        key:
          type: string
          const: INTERFACES
        value:
          type: array
          items:
            type: object
            required:
              - ip
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/interface_status'
              ip:
                type: string


    sys_info_statuses:
      description: Status after creating interface
      properties:
        key:
          type: string
          const: INTERFACES
        value:
          type: array
          items:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/sys_info'

    support_info:
      description: Status after creating interface
      properties:
        key:
          type: string
        value:
          type: string

    service_ports:
      type: object
      description: Service ports.
      properties:
        udp:
          $ref: '#/components/schemas/udp_ports'
        tcp:
          $ref: '#/components/schemas/tcp_ports'

    udp_ports:
      type: array
      description: List of udp ports.
      items:
        type: integer

    tcp_ports:
      type: array
      description: List of tcp ports.
      items:
        type: integer

    msg_id:
      type: string
      description: Unique ID of message. (response should be sent with same id as request)

    public_key:
      type: string

    index:
      type: integer

    internal_ip:
      type: string

    ip:
      type: string

    latency_ms:
      type: string

    packet_loss:
      type: number

    peer_action:
      type: string
      enum:
        - ADD
        - DEL

    route_status:
      type: string
      enum:
        - ERROR
        - OK

    interface_status:
      type: string
      enum:
        - ERROR
        - WG_NOT_FOUND
        - IP_CONFLICT


    sys_info:
      type: string
      enum:
        - DISK_PRESSURE
        - MEMORY_USAGE
        - CPU_USAGE

    service_type:
      type: string
      enum:
        - DOCKER
        - KUBERNETES
        - HOST

    severity:
      type: string
      enum:
        - DEBUG
        - INFO
        - WARNING
        - ERROR

    allowed_ips:
      type: array
      description: List of ips.
      items:
        type: string

    port:
      type: integer
      description: Interface listening port.

    rx_bytes:
      type: integer

    tx_bytes:
      type: integer

    tx_bps:
      type: number

    rx_bps:
      type: number

    connection_id:
      type: integer

    connection_group_id:
      type: integer

    interval:
      type: integer

    response_limit:
      type: integer

    subnets:
      type: array
      items:
        type: string