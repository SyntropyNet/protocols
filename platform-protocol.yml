asyncapi: 2.2.0
info:
  title: Syntropy Websockets API
  version: 1.0.0
  description: >
    Syntropy WebSockets API allows to connect with Syntropy controller and get
    node configuration updates and return required info to controller.


    ### General Rules


    - Agent version must be valid semver https://semver.org/.

    - All messages sent and received via WebSockets are encoded in JSON format


    ### HTTP request headers when connecting to controller websocket.
      ```
      {
        "Authorization": "AGENT_TOKEN",
        "X-DeviceId": "Unique device ID.",
      }
      ```
    ### Github

    - https://github.com/SyntropyNet/protocols/tree/v2-proposal
servers:
  prod:
    url: controller-prod-platform-agents.syntropystack.com
    protocol: wss
    description: >
      Always stable production server for agents . Authentication token has to
      be created at https://platform.syntropystack.com
  devel:
    url: controller-devel-platform-agents.syntropystack.com
    protocol: wss
    description: >
      Always stable Development server for agents. Authentication token has to
      be created at https://platform-devel.syntropystack.com
  sandbox:
    url: controller-sandbox-platform-agents.syntropystack.com
    protocol: wss
    description: >
      Sometimes Stable Sandbox server for agents. Authentication token has to be
      created at https://platform-sandbox.syntropystack.com
channels:
  /:
    subscribe:
      description: Receive messages from the controller
      message:
        oneOf:
          - $ref: '#/components/messages/GET_INIT_INFO (CTA)'
          - $ref: '#/components/messages/SET_CONFIG (CTA)'
          - $ref: '#/components/messages/UPDATE_CONFIG (CTA)'
          - $ref: '#/components/messages/SET_AUTO_PING (CTA)'
          - $ref: '#/components/messages/SET_PEER_CONF (CTA)'
          - $ref: '#/components/messages/GET_SUPPORT_INFO (CTA)'
    publish:
      description: Send messeges to the controller
      message:
        oneOf:
          - $ref: '#/components/messages/INIT_INFO (ATC)'
          - $ref: '#/components/messages/CONFIG_INFO (ATC)'
          - $ref: '#/components/messages/AUTO_PING (ATC)'
          - $ref: '#/components/messages/NETWORK_STATISTICS (ATC)'
          - $ref: '#/components/messages/SERVICE_ROUTE_CHANGE (ATC)'
          - $ref: '#/components/messages/SERVICE_STATUS (ATC)'
          - $ref: '#/components/messages/LOGGER (ATC)'
          - $ref: '#/components/messages/SERVICE_INFO (ATC)'
          - $ref: '#/components/messages/SUPPORT_INFO (ATC)'
components:
  messages:
    SET_AUTO_PING (CTA):
      description: >-
        Controller sets the list of host to be pinged (ICMP) periodically at
        configured interval (in seconds). The first response should be processed
        ASAP.
      payload:
        $ref: '#/components/schemas/SET_AUTO_PING (CTA)'
      examples:
        - payload:
            id: nEsBfD773UlafZnf
            type: AUTO_PING
            data:
              ips:
                - 23.95.220.138
                - 94.237.29.266
                - 173.104.147.220
              interval: 60
              response_limit: 5
    AUTO_PING (ATC):
      description: >-
        Response results count should be limited to `response_limit` best
        results, sorted by latency.
      payload:
        $ref: '#/components/schemas/AUTO_PING (ATC)'
      examples:
        - payload:
            id: nEsBfD773UlafZnf
            type: AUTO_PING
            data:
            - ip: 23.95.220.138
              latency_ms: 200
              packet_loss: 0.5
            - ip: 94.237.29.266
              latency_ms: 2
              packet_loss: 0
            - ip: 173.104.147.220
              packet_loss: 1

    GET_INIT_INFO (CTA):
      summary: Event for getting essential info about endpoint.
      description: >-
        Event is triggered when platform agent establishes connection with
        controller. Controller requests platform agent for agent's metadata such
        as its server provider, category, location, user specified tags,
        available services (entire list) in agent network. Controller accepts
        docker_* prefixed keys for compatibility. No further communication will
        happen until response is sent.
      payload:
        $ref: '#/components/schemas/GET_INIT_INFO (CTA)'
      x-response:
        $ref: '#/components/schemas/INIT_INFO (ATC)'
      examples:
        - payload:
            id: nEsBfD773UlafZ12
            type: GET_INIT_INFO
            data: {}
    INIT_INFO (ATC):
      summary: Event for getting essential info about endpoint.
      description: >-
        Event is triggered when platform agent establishes connection with
        controller. Controller requests platform agent for agent's metadata such
        as its server provider, category, location, user specified tags,
        available services (entire list) in agent network. Controller accepts
        docker_* prefixed keys for compatibility.
      payload:
        $ref: '#/components/schemas/INIT_INFO (ATC)'
      examples:
        - payload:
            id: 4QpCCN4NDhwAGi1X
            executed_at: '2019-08-24T14:15:22Z'
            type: INIT_INFO
            data:
              agent:
                name: ProtocolAgent
                provider: 3
                tags:
                - Protocol
                - DEMO
                public_ip: 80.208.227.130
                version: 0.5.0
                operating_system: LINUX
              config:
                auto_connect_services: false


    GET_SUPPORT_INFO (CTA):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (CTA)'
      x-response:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'
      examples:
        - payload:
            id: nEsBfD773UlafZ12
            type: SUPPORT_INFO
            data: {}
    SUPPORT_INFO (ATC):
      summary: Event for getting debug info about endpoint.
      payload:
        $ref: '#/components/schemas/SUPPORT_INFO (ATC)'
    SET_CONFIG (CTA):
      description: >-
        Event is triggered when platform agent establishes connection with
        controller. Controller sends entire configuration dump to platform
        agent.
      payload:
        $ref: '#/components/schemas/SET_CONFIG'
      x-response:
        $ref: '#/components/messages/CONFIG_INFO (ATC)'
      examples:
        - payload:
            id: ERpCCdsNDhwAXi4X
            type: SET_CONFIG
            data:
              interfaces:
              - index: 0
                internal_ip: 10.69.0.146
              - index: 1
                internal_ip: 10.69.0.147
              peers:
                - action: ADD
                  index: 0
                  public_key: c1/1GkBsq+MCDdiXFrfjLnXI+H7oGvDQs0kfn/gmFkI=
                  private_ip: 10.69.88.21
                  public_ip: 194.51.24.152
                  port: 5443
                  connection_id: 1025317
                  connection_group_id: 75122
                - action: ADD
                  index: 0
                  public_key: 2sw+YfjZUVQEPECtfqKtvaNvJBpC+ysQRHD/zw4Dcg0=
                  private_ip: 10.69.100.23
                  public_ip: 94.251.23.158
                  port: 5443
                  connection_id: 1025619
                  connection_group_id: 75587
                - action: ADD
                  index: 1
                  public_key: 0GiDp4uyu548ExsxCxV8MMDSToh49jYy8Xm9igM15n0=
                  private_ip: 10.69.100.24
                  public_ip: 94.251.23.158
                  port: 5444
                  connection_id: 1025618
                  connection_group_id: 75587
              services:
                - action: ADD
                  ip: 172.21.0.3/32
                  name: MongoDB
                  connection_ids:
                    - 1025317
                  ports:
                    tcp:
                      - 27017
                - action: ADD
                  ip: 172.20.0.2/32
                  name: Prometheus
                  connection_ids:
                    - 1025619
                    - 1025618
                  ports:
                    udp:
                      - 9090
                    tcp:
                      - 9090
              settings:
                rerouting:
                  - action: ADD
                    rerouting_threshold: 20
                    latency_coefficient: 1.2
                  - action: ADD
                    rerouting_threshold: 50
                    latency_coefficient: 1.8
                    connection_group_ids:
                      - 1025317
    UPDATE_CONFIG (CTA):
      description: >-
        Event is triggered when platform agent updates connection with
        controller. Controller sends only diff configuration dump to platform
        agent.
      payload:
        $ref: '#/components/schemas/SET_CONFIG'
      x-response:
        $ref: '#/components/messages/CONFIG_INFO (ATC)'
      examples:
        - payload:
            id: ERpCCdsNDhwAXi4X
            type: UPDATE_CONFIG
            data:
              peers:
                - action: DEL
                  index: 0
                  public_key: c1/1GkBsq+MCDdiXFrfjLnXI+H7oGvDQs0kfn/gmFkI=
                  private_ip: 10.69.88.21
              services:
                - action: DEL
                  ip: 172.21.0.3/32
                  name: MongoDB
                  connection_ids:
                    - 1025317
                  ports:
                    tcp:
                      - 27017
              settings:
                rerouting:
                  - action: ADD
                    rerouting_threshold: 12
                    latency_coefficient: 3.4
                  - action: ADD
                    rerouting_threshold: 33
                    latency_coefficient: 5.3
                    connection_group_ids:
                      - 1025317

    CONFIG_INFO (ATC):
      summary: CONFIG_INFO (ATC) is a response to SET_CONFIG (CTA) message
      description: >-
        Platform agents sends this event to controller when it wants to update
        configuration data, i.e. to change configured interface public key due
        to unrecoverable loss of data on platform agents side.
      payload:
        $ref: '#/components/schemas/CONFIG_INFO (ATC)'
      examples:
        - payload:
            id: ERpCCdsNDhwAXi4X
            executed_at: '2019-08-24T14:15:22Z'
            type: CONFIG_INFO
            data:
              interfaces:
                - index: 0
                  internal_ip: 10.69.0.146
                  public_key: RzaBT6fXJime+KEFJKkWrozumOEDPpZhJaHWPZmerAA=
                  port: 3333
                - index: 1
                  internal_ip: 10.69.0.147
                  public_key: J7Dt8IZ3arBUSkHWTJW5WUPf3cpoZRU+qSYVS+eqwAI=
                  port: 3334

    SET_PEER_CONF (CTA):
      description: >-
        Controller sends platform agent configuration commands, which should be
        executed in platform agent, i.e. to create interface, to add peer, to
        delete interface, to delete peer. When adding interface, controller can
        pick port, or agent can respond with assigned one.
      payload:
        $ref: '#/components/schemas/SET_PEER_CONF (CTA)'
      examples:
        - payload:
            id: Asa05ML1102HSJVl
            type: SET_PEER_CONF
            data:
                - action: ADD
                  index: 0
                  public_key: c1/1GkBsq+MCDdiXFrfjLnXI+H7oGvDQs0kfn/gmFkI=
                  private_ip: 10.69.88.21
                  public_ip: 194.51.24.152
                  port: 5443
                  connection_id: 1025317
                  connection_group_id: 75122
                  services:
                  - ip: 172.20.0.2/32
                    name: Prometheus
                    ports:
                      udp:
                      - 9090
                      tcp:
                      - 9090
                - action: ADD
                  index: 0
                  public_key: 2sw+YfjZUVQEPECtfqKtvaNvJBpC+ysQRHD/zw4Dcg0=
                  private_ip: 10.69.100.23
                  public_ip: 94.251.23.158
                  port: 5443
                  connection_id: 1025619
                  connection_group_id: 75587
                  services:
                  - ip: 172.21.0.3/32
                    name: MongoDB
                    ports:
                      tcp:
                      - 27017
                - action: DEL
                  index: 1
                  public_key: 0GiDp4uyu548ExsxCxV8MMDSToh49jYy8Xm9igM15n0=
                  private_ip: 10.69.100.24

        - payload:
            id: Asa05ML1102HSJVl
            type: SET_PEER_CONF (CTA)
            data:
              - fn: remove_peer
                args:
                  index: SYNTROPY_PUBLIC
                  public_key: KaCq7nTViC9rhPc21ky92H7iTldGF76m3hrcSR4UdUc=
                  allowed_ips:
                    - 10.69.10.86/32
              - fn: remove_peer
                index: SYNTROPY_SDN1
                public_key: AxB/JKQ9aPRgfEA5zI00jX4aZzfxz8LwTKrYaN0OkjI=
                allowed_ips:
                  - 10.69.10.86/32
    NETWORK_STATISTICS (ATC):
      description: >-
        Platform agent periodically sends wireguard configured interfaces peers
        bandwith data (bandwith of one particular peer via particular
        interface). Platform agent sends data every 10 seconds. If there is
        nothing to report, platform agent does not send anything.
      payload:
        $ref: '#/components/schemas/NETWORK_STATISTICS (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: '2019-08-24T14:15:22Z'
            type: NETWORK_STATISTICS
            data:
            - index: 0
              peers:
              - connection_id: 1025317
                connection_group_id: 75122
                last_handshake: '2019-08-24T14:15:22Z'
                latency_ms: 5
                packet_loss: 0
                rx_bytes: 3085555553332344
                tx_bytes: 4353444344444444
                tx_bps: 44000
                rx_bps: 50000
            - index: 0
              peers:
              - connection_id: 1025619
                connection_group_id: 75587
                last_handshake: '2019-08-24T14:15:22Z'
                latency_ms: 12
                packet_loss: 0
                rx_bytes: 6085555553332344
                tx_bytes: 3353444344444444
                tx_bps: 44000
                rx_bps: 50000
            - index: 1
              peers:
              - connection_id: 1025618
                connection_group_id: 75587
                last_handshake: '2019-08-24T14:15:22Z'
                latency_ms: 355
                packet_loss: 0.9
                rx_bytes: 30855
                tx_bytes: 43534
                tx_bps: 100
                rx_bps: 8600

    SERVICE_ROUTE_CHANGE (ATC):
      description: Platform agent sends information when current ACTIVE route changes.
      payload:
        $ref: '#/components/schemas/SERVICE_ROUTE_CHANGE (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: '2019-08-24T14:15:22Z'
            type: SERVICE_ROUTE_CHANGE
            data:
            - prev_connection_id: 23444
              connection_id: 23443
            - prev_connection_id: 23441
              connection_id: 23446

    LOGGER (ATC):
      description: >-
        Platform agent sends nicely formatted log data to controller. This data
        is later redirected to platform agents index for users to consume.
      payload:
        $ref: '#/components/schemas/LOGGER (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: '2019-08-24T14:15:22Z'
            type: LOGGER (ATC)
            data:
              severity: DEBUG
              message: "[INFO] Debug message example"

    SERVICE_INFO (ATC):
      description: >-
        This event is triggered when platform agent network changes. Platform
        agent sends entire list of available services and their metadata.
      payload:
        $ref: '#/components/schemas/SERVICE_INFO (ATC)'
      examples:
        - payload:
            id: "-"
            executed_at: '2019-08-24T14:15:22Z'
            type: SERVICE_INFO
            data:
            - name: PostgresSQL
              type: DOCKER
              ip: 172.23.0.3/32
              network:
              - postgres_default
              ports:
                tcp:
                - 5432


    SERVICE_STATUS (ATC):
      description: >-
        Platform agent sends information about route addition. Confirms
        successes and failures.
      payload:
        $ref: '#/components/schemas/service_status'
      examples:
        - payload:
            id: "-"
            type: SERVICE_STATUS
            data:
            - connection_id: 1025317
              connection_group_id: 75122
              statuses:
              - status: ERROR
                ip: 172.20.0.2/32
                msg: OVERLAP
              - status: OK
                ip: 172.21.0.3/32


  schemas:
    SET_AUTO_PING (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_AUTO_PING
        data:
          required:
            - ips
            - interval
            - response_limit
          properties:
            ips:
              type: array
              description: Array of ips.
              items:
                type: string
                description: Array of ip addresses agent should ping.
            interval:
              $ref: '#/components/schemas/interval'
              description: Interval in seconds to ping hosts.
            response_limit:
              $ref: '#/components/schemas/response_limit'
              description: Count of best results to send in response.
    AUTO_PING (ATC):
      type: object
      required:
        - id
        - type
        - executed_at
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: AUTO_PING
        executed_at:
          $ref: '#/components/schemas/executed_at'
        data:
          type: array
          description: Array of ips.
          items:
            description: Array of ip addresses should ping.
            type: object
            required:
              - ip
              - latency_ms
              - packet_loss
            properties:
              ip:
                type: string
                description: Ip address in string format.
              latency_ms:
                $ref: '#/components/schemas/latency_ms'
              packet_loss:
                type: number
    GET_INIT_INFO (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: GET_INIT_INFO
        data:
          type: object
    INIT_INFO (ATC):
      type: object
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: INIT_INFO
        data:
          type: object
          properties:
            agent:
              type: object
              required:
                - name
                - public_ip
                - operating_system
                - version
              properties:
                name:
                  type: string
                provider:
                  type: integer
                  description: >-
                    Choose provider from
                    https://docs.syntropystack.com/docs/syntropy-agent-variables#syntropy-provider
                tags:
                  type: array
                  description: Array of tags.
                  items:
                    type: string
                    description: Tag in string format.
                public_ip:
                  type: string
                  description: Agent host public ip.
                version:
                  type: string
                  description: Agent software version. Semantic Versioning (x.x.x).
                operating_system:
                  type: string
                  enum:
                    - LINUX
                    - DARWIN
                    - WINDOWS
            config:
              type: object
              properties:
                auto_connect_services:
                  type: boolean
                  default: false
                  description: Status whether services will be connected by default or not.
    SUPPORT_INFO (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: GET_SUPPORT_INFO
        data:
          type: object
    SUPPORT_INFO (ATC):
      type: object
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: SUPPORT_INFO
        data:
          type: array
          items:
            $ref: '#/components/schemas/support_info'
    SET_CONFIG:
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_CONFIG
        data:
          type: object
          required:
            - agent_id
            - network
          properties:
            agent_id:
              type: string
            interfaces:
              type: array
              items:
                - $ref: '#/components/schemas/interface'
            peers:
              type: array
              items:
                - $ref: '#/components/schemas/peer'
            services:
              type: array
              items:
                - $ref: '#/components/schemas/service'
            settings:
              type: object
              properties:
                rerouting:
                  type: array
                  items:
                    - $ref: '#/components/schemas/rerouting_threshold'
    CONFIG_INFO (ATC):
      type: object
      description: Need to send only if interfaces updated compared to SET_CONFIG (CTA).
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: CONFIG_INFO
        data:
          type: object
          description: >-
            List of resulting executed VPN commands. (create_interface only
            atm). Need to change only if public_key/port differs from SET_CONFIG
            (CTA).
          properties:
            interfaces:
              type: array
              items:
                - $ref: '#/components/schemas/interface'
    SET_PEER_CONF (CTA):
      type: object
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
        type:
          type: string
          const: SET_PEER_CONF
        data:
          type: array
          description: List of wireguard configration commands
          items:
              $ref: '#/components/schemas/peer'
    NETWORK_STATISTICS (ATC):
      type: object
      required:
        - id
        - type
        - data
        - executed_at
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: NETWORK_STATISTICS (ATC)
        data:
          type: array
          description: List of interfaces with analytic peers data.
          items:
            type: object
            required:
              - index
              - peers
            properties:
              index:
                $ref: '#/components/schemas/index'
              peers:
                type: array
                items:
                  type: object
                  required:
                    - connection_id
                    - connection_group_id
                    - last_handshake
                    - packet_loss
                    - rx_bytes
                    - tx_bytes
                    - rx_bps
                    - tx_bps
                  properties:
                    connection_id:
                      $ref: '#/components/schemas/connection_id'
                    connection_group_id:
                      $ref: '#/components/schemas/connection_group_id'
                    last_handshake:
                      type: string
                      format: date-time
                      description: Omitted when handshake never occurred.
                    latency_ms:
                      $ref: '#/components/schemas/latency_ms'
                    packet_loss:
                      $ref: '#/components/schemas/packet_loss'
                    rx_bytes:
                      $ref: '#/components/schemas/rx_bytes'
                    tx_bytes:
                      $ref: '#/components/schemas/tx_bytes'
                    tx_bps:
                      $ref: '#/components/schemas/tx_bps'
                    rx_bps:
                      $ref: '#/components/schemas/rx_bps'
    SERVICE_ROUTE_CHANGE (ATC):
      type: object
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: SERVICE_ROUTE_CHANGE (ATC)
        data:
          type: array
          description: List of peers connections that became active after rerouting event.
          items:
            type: object
            required:
              - connection_id
              - prev_connection_id
            properties:
              prev_connection_id:
                $ref: '#/components/schemas/connection_id'
                default: 0
              connection_id:
                $ref: '#/components/schemas/connection_id'
    LOGGER (ATC):
      type: object
      required:
        - id
        - type
        - data
        - executed_at
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: LOGGER (ATC)
        data:
          type: object
          required:
            - severity
            - message
          properties:
            severity:
              $ref: '#/components/schemas/severity'
            message:
              type: string
    SERVICE_INFO (ATC):
      type: object
      required:
        - id
        - executed_at
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        executed_at:
          $ref: '#/components/schemas/executed_at'
        type:
          type: string
          const: SERVICE_INFO (ATC)
        data:
          type: array
          items:
            type: object
            required:
              - name
              - type
              - ip
            properties:
              name:
                type: string
              type:
                $ref: '#/components/schemas/service_type'
              ip:
                type: string
              network:
                type: array
                items:
                  type: string
              ports:
                $ref: '#/components/schemas/service_ports'
    create_interface:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: create_interface
        args:
          $ref: '#/components/schemas/interface'
        metadata:
          $ref: '#/components/schemas/interface_metadata'
      description: Wireguard interface creation.
    remove_interface:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: remove_interface
        args:
          type: object
          required:
            - index
          properties:
            index:
              $ref: '#/components/schemas/index'
      description: Wireguard interface remove.
    add_peer:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: add_peer
        args:
          $ref: '#/components/schemas/peer'
      description: Wireguard add peer.
    remove_peer:
      type: object
      required:
        - fn
        - args
      properties:
        fn:
          type: string
          const: remove_peer
        args:
          type: object
          required:
            - index
          properties:
            index:
              $ref: '#/components/schemas/index'
            public_key:
              $ref: '#/components/schemas/public_key'
            allowed_ips:
              $ref: '#/components/schemas/allowed_ips'
      description: Wireguard peer remove.
    interface:
      type: object
      required:
        - internal_ip
        - index
      properties:
        index:
          $ref: '#/components/schemas/index'
        internal_ip:
          $ref: '#/components/schemas/internal_ip'
        public_key:
          $ref: '#/components/schemas/public_key'
        port:
          $ref: '#/components/schemas/port'
        peers:
          type: array
          items:
            - $ref: '#/components/schemas/peer'
      description: Wireguard interface info.
    peer:
      type: object
      required:
        - index
        - public_key
        - allowed_ips
        - gw_ipv4
        - action
        - private_ip
        - public_ip
        - connection_id
        - connection_group_id
      properties:
        action:
          $ref: '#/components/schemas/action'
        index:
          $ref: '#/components/schemas/index'
        public_key:
          $ref: '#/components/schemas/public_key'
        private_ip:
          type: string
        public_ip:
          type: string
        port:
          $ref: '#/components/schemas/port'
        connection_id:
          $ref: '#/components/schemas/connection_id'
        connection_group_id:
          $ref: '#/components/schemas/connection_group_id'
        services:
          type: array
          items:
            - $ref: '#/components/schemas/service'
      description: Peer fields.
    service:
      type: object
      required:
        - ip
        - name
        - action
      properties:
        action:
          $ref: '#/components/schemas/action'
        ip:
          $ref: '#/components/schemas/ip'
        name:
          type: string
        connection_ids:
          type: array
          items:
            - $ref: '#/components/schemas/connection_id'
        ports:
          $ref: '#/components/schemas/service_ports'
    interface_metadata:
      type: object
      properties:
        connection_id:
          $ref: '#/components/schemas/connection_id'
      description: Interface Metadata
    peer_metadata:
      type: object
      properties:
        device_id:
          type: string
        device_name:
          type: string
        device_public_ipv4:
          type: string
        connection_id:
          $ref: '#/components/schemas/connection_id'
        connection_group_id:
          $ref: '#/components/schemas/connection_group_id'
        allowed_ips_info:
          type: array
          items:
            type: object
            properties:
              agent_service_name:
                type: string
              agent_service_subnet_ip:
                type: string
              agent_service_tcp_ports:
                $ref: '#/components/schemas/tcp_ports'
              agent_service_udp_ports:
                $ref: '#/components/schemas/udp_ports'
      description: Peer Metadata
    container_info:
      type: array
      description: Array of docker network objects.
      items:
        description: Docker network object.
        type: object
        required:
          - agent_container_id
          - agent_container_name
          - agent_container_state
          - agent_container_networks
          - agent_container_ips
        properties:
          agent_container_id:
            type: string
            description: Unique id of docker container.
          agent_container_name:
            type: string
          agent_container_state:
            type: string
            description: Container state.
            enum:
              - running
              - stopped
          agent_container_uptime:
            type: string
            description: Container uptime.
          agent_container_networks:
            type: array
            description: Networks that container belongs to.
            items:
              type: string
          agent_container_ips:
            type: array
            description: Container ips.
            items:
              type: string
          agent_container_ports:
            $ref: '#/components/schemas/service_ports'
    service_status:
      type: object
      description: Status after adding route to host routing table.
      required:
        - id
        - type
        - data
      properties:
        id:
          $ref: '#/components/schemas/msg_id'
          default: '-'
        type:
          type: string
          const: SERVICE_STATUS
        data:
          type: array
          items:
            type: object
            required:
              - connection_group_id
              - statuses
            properties:
              connection_id:
                $ref: '#/components/schemas/connection_id'
              connection_group_id:
                $ref: '#/components/schemas/connection_group_id'
              statuses:
                $ref: '#/components/schemas/route_statuses'
    route_statuses:
      type: array
      description: List of ips.
      items:
        type: object
        required:
          - status
          - ip
        properties:
          status:
            $ref: '#/components/schemas/route_status'
          ip:
            type: string
          msg:
            type: string
    new_route_statuses:
      description: Status after adding route to host routing table.
      properties:
        key:
          type: string
          const: ROUTES
        value:
          type: array
          items:
            type: object
            required:
              - connection_group_id
              - statuses
            properties:
              connection_group_id:
                $ref: '#/components/schemas/connection_group_id'
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/route_status'
              ip:
                type: string
    interface_statuses:
      description: Status after creating interface
      properties:
        key:
          type: string
          const: INTERFACES
        value:
          type: array
          items:
            type: object
            required:
              - ip
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/interface_status'
              ip:
                type: string
    sys_info_statuses:
      description: Status after creating interface
      properties:
        key:
          type: string
          const: INTERFACES
        value:
          type: array
          items:
            type: object
            properties:
              errors:
                type: array
                items:
                  $ref: '#/components/schemas/sys_info'
    support_info:
      description: Status after creating interface
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          type: string

    rerouting_threshold:
      type: object
      description: Rerouting thresholds.
      required:
        - rerouting_threshold
        - latency_coefficient
        - action
      properties:
        action:
          $ref: '#/components/schemas/action'
        latency_coefficient:
          $ref: '#/components/schemas/ratio'
        rerouting_threshold:
          $ref: '#/components/schemas/latency_ms'
        connection_group_ids:
          type: array
          description: Empty if global.
          items:
            type: integer
    service_ports:
      type: object
      description: Service ports.
      properties:
        udp:
          $ref: '#/components/schemas/udp_ports'
        tcp:
          $ref: '#/components/schemas/tcp_ports'
    udp_ports:
      type: array
      description: List of udp ports.
      items:
        type: integer
    tcp_ports:
      type: array
      description: List of tcp ports.
      items:
        type: integer
    msg_id:
      type: string
      description: Unique ID of message. (response should be sent with same id as request)
    executed_at:
      type: string
      format: date-time
    public_key:
      type: string
    index:
      type: integer
    internal_ip:
      type: string
    ip:
      type: string
    latency_ms:
      type: number
    ratio:
      type: number
    packet_loss:
      type: number
    action:
      type: string
      enum:
        - ADD
        - UPDATE
        - DEL
    route_status:
      type: string
      enum:
        - ERROR
        - OK
    interface_status:
      type: string
      enum:
        - ERROR
        - WG_NOT_FOUND
        - IP_CONFLICT
    sys_info:
      type: string
      enum:
        - DISK_PRESSURE
        - MEMORY_USAGE
        - CPU_USAGE
    service_type:
      type: string
      enum:
        - DOCKER
        - KUBERNETES
        - HOST
    severity:
      type: string
      enum:
        - DEBUG
        - INFO
        - WARNING
        - ERROR
    allowed_ips:
      type: array
      description: List of ips.
      items:
        type: string
    port:
      type: integer
      description: Interface listening port.
    rx_bytes:
      type: integer
      format: int64
    tx_bytes:
      type: integer
      format: int64
    tx_bps:
      type: number
      format: int32
    rx_bps:
      type: number
      format: int32
    connection_id:
      type: integer
    connection_group_id:
      type: integer
    interval:
      type: integer
    response_limit:
      type: integer
    subnets:
      type: array
      items:
        type: string
